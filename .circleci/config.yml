# CircleCI 2.1 configuration file
#
version: 2.1

orbs:
  # Check https://circleci.com/developer/orbs/orb/circleci/node for more details
  node: circleci/node@5.2.0

  # Check https://circleci.com/developer/orbs/orb/circleci/github-cli for more details
  github-cli: circleci/github-cli@2.2.0

  # Check https://circleci.com/developer/orbs/orb/circleci/aws-cli for more details
  aws-cli: circleci/aws-cli@4.0.0

  # Check https://circleci.com/developer/orbs/orb/circleci/helm for more details
  helm: circleci/helm@2.0.1

jobs:
  build_and_deploy:
    # Check https://circleci.com/developer/images/image/cimg/base for more details
    machine:
      image: ubuntu-2204:2023.10.1
    resource_class: medium

    steps:
      - checkout
      - aws-cli/setup
      - helm/install-helm-client
      - run:
          name: Check that AWS environment variables were supplied
          command: |
            : ${AWS_REGION:?"Must specify AWS region"}
            AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account | sed 's/^"\(.*\)"$/\1/g')"
            ECR_ACCOUNT_URL="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
            echo "export ECR_ACCOUNT_URL=\"$ECR_ACCOUNT_URL\"" >> "$BASH_ENV"
      - run:
          name: Login to ECR for Docker and Helm
          command: |
            aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_ACCOUNT_URL"
            aws ecr get-login-password --region "$AWS_REGION" | helm registry login --username AWS --password-stdin "$ECR_ACCOUNT_URL"
      - run:
          name: Build, Test and deploy Docker image / Helm Charts to ECR
          command: make all
  promote_build:
    # Terragunt executor is needed because the promote-version.sh needs to
    # auto-format the files after modification
    executor: terragrunt
    steps:
      - checkout # check out source code to working directory
      - check_skip_job
      - check_skip_promotion
      - run:
          name: Install python
          command: |
            apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python
      - check_version
      - add_ssh_keys:
          fingerprints: # add SSH deploy key for nuodb/nuodb-dbaas-deploy repository
            - "SHA256:xCr3Nv9p4lncWY3MzOQEU7WCXDi3d/BnIBCnIGGjfbk"
      - run:
          name: Promote Build to DEV
          command: |
            VERSION=$(grep -e "^appVersion:" charts/dbaas-cockpit/Chart.yaml | cut -d \" -f 2 | cut -d - -f 1)
            SHA=$(git rev-parse --short HEAD)
            VERSION_SHA=${VERSION}-dev.sha-${SHA}

            mkdir -p tmp/repos/$DBAAS_DEPLOY_REPO \
              && cd tmp/repos/$DBAAS_DEPLOY_REPO
            git clone "https://${DBAAS_DEPLOY_REPO}.git" .
            git checkout $DBAAS_DEPLOY_BRANCH
            COMMIT="$(echo ${CIRCLE_SHA1:0:7})"
            if [ -n "$GIT_TAG" ]; then
              COMMIT="$GIT_TAG"
            fi
            head="$(git rev-parse --short HEAD)"
            # Update DbaaS Cockpit UI version
            scripts/promote-version.sh nuodb-control-plane \
              --set dbaas_cockpit_image_tag=$VERSION_SHA \
              --set dbaas_cockpit_chart_version=$VERSION_SHA
            # Check if the version has been promoted
            if [ "$head" != "$(git rev-parse --short HEAD)" ]; then
              git commit -a --amend --no-edit
              git push --set-upstream origin "$(git rev-parse --abbrev-ref HEAD)"
            fi
          environment:
            DBAAS_DEPLOY_REPO: github.com/nuodb/nuodb-dbaas-deploy
            DBAAS_DEPLOY_BRANCH: main
            GIT_COMMITTER_NAME: promotebot[bot]
            GIT_COMMITTER_EMAIL: support@nuodb.com

workflows:
  version: 2
  continuous:
    jobs:
      # run test jobs in parallel
      - build_and_deploy:
          name: "Build and deploy"
      - promote_build:
          requires:
            - "Build and deploy"
          name: "Promote to DBaaS DEV"
