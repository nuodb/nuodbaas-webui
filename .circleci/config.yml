# (C) Copyright 2024-2025 Dassault Systemes SE.  All Rights Reserved.

# CircleCI 2.1 configuration file
version: 2.1

orbs:
  # Check https://circleci.com/developer/orbs/orb/circleci/node for more details
  node: circleci/node@6.1.0

  # Check https://circleci.com/developer/orbs/orb/circleci/github-cli for more details
  github-cli: circleci/github-cli@2.2.0

  # Check https://circleci.com/developer/orbs/orb/circleci/aws-cli for more details
  aws-cli: circleci/aws-cli@4.0.0

  # Check https://circleci.com/developer/orbs/orb/circleci/helm for more details
  helm: circleci/helm@2.0.1

executors:
  terragrunt:
    description: |
      Docker based Terraform and Terragrunt executor.
    docker:
      - image: alpine/terragrunt:<< parameters.tag >>
    parameters:
      tag:
        default: 1.5.7
        description: Specify the Terragrunt Docker image tag for the executor
        type: string
    resource_class: small

  ubuntu_vm:
    machine:
      image: ubuntu-2004:2023.10.1
    resource_class: medium

jobs:

  build_image:
    executor: ubuntu_vm
    environment:
      NUODB_CP_COMMIT: e98e2b890cda772f07da6bd91991a75868d0f2b6
    steps:
      - checkout
      - check_skip_job
      - check_version
      - add_ssh_keys:
          fingerprints: # add SSH deploy key for nuodb/nuodb-control-plane repository
            - "SHA256:rXyFWvQb0aSIvZXMOSVqlNtRlLK4m81yak/ivRtfBDA"
      - run:
          name: Prepare persistent workspace for Control Plane repository and image
          command: |
            mkdir -p /tmp/workspace
      - run:
          name: Checkout NuoDB Control Plane repository
          command: |
            git clone git@github.com:nuodb/nuodb-control-plane.git /tmp/workspace/nuodb-control-plane
            cd /tmp/workspace/nuodb-control-plane
            git checkout "$NUODB_CP_COMMIT"
      - run:
          name: Build Control Plane Image
          command: |
            cd /tmp/workspace/nuodb-control-plane
            make docker-build
          environment:
            IMG_REPO: nuodb/nuodb-control-plane
      - run:
          name: Save Docker image to file
          command: |
            cd /tmp/workspace/nuodb-control-plane
            ./docker/save.sh
          environment:
            IMG_REPO: nuodb/nuodb-control-plane
            IMG_FILE: /tmp/workspace/nuodb-control-plane.tar
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "*"

  build_and_deploy:
    executor: ubuntu_vm
    environment:
      NUODB_CP_REPO: /tmp/workspace/nuodb-control-plane
      NUODB_CP_COMMIT: e98e2b890cda772f07da6bd91991a75868d0f2b6
    steps:
      - checkout
      - aws-cli/setup
      - helm/install-helm-client
      - run:
          name: Clean up get_helm.sh
          command: |
            rm -f get_helm.sh
      - run:
          name: Check that AWS environment variables were supplied
          command: |
            : ${AWS_REGION:?"Must specify AWS region"}
            AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account | sed 's/^"\(.*\)"$/\1/g')"
            ECR_ACCOUNT_URL="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
            echo "export ECR_ACCOUNT_URL=\"$ECR_ACCOUNT_URL\"" >> "$BASH_ENV"
      - run:
          name: Validate Copyrights
          command: make copyright
      - run:
          name: Login to ECR for Docker and Helm
          command: |
            aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_ACCOUNT_URL"
            aws ecr get-login-password --region "$AWS_REGION" | helm registry login --username AWS --password-stdin "$ECR_ACCOUNT_URL"
      - run:
          name: Login to Github Container Registry
          command: |
            echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Control Plane Image
          command: |
            docker load -i /tmp/workspace/nuodb-control-plane.tar
      - run:
          name: Build Image
          command: make build-image
      - run:
          name: Build Integration Test Image
          command: make build-integration-tests-docker
      - run:
          name: Setup Integration Test Environment
          command: make setup-integration-tests
      - run:
          name: Run Integration Tests
          command: make run-integration-tests-only
      - run:
          name: Teardown Integration Test Environment
          when: always
          command: make teardown-integration-tests
      - run:
          name: Deploy Docker images
          command: ./build_utils.sh deployDockerImages
      - run:
          name: Deploy Helm Charts
          command: ./build_utils.sh createAndUploadHelmPackage
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find ./selenium-tests/target/test-reports -type f -name "*.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - run:
          name: Compress Test Results
          when: always
          command: tar -cvzf selenium-test-results.tar.gz -C selenium-tests/target/test-results .
      - store_artifacts:
          path: selenium-test-results.tar.gz
          destination: selenium_test_results
  promote_build:
    # Terragunt executor is needed because the promote-version.sh needs to
    # auto-format the files after modification
    executor: terragrunt
    steps:
      - checkout # check out source code to working directory
      - check_skip_promotion
      - run:
          name: Install python
          command: |
            apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python
      - add_ssh_keys:
          fingerprints: # add SSH deploy key for nuodb/nuodb-dbaas-deploy repository
            - "SHA256:0sqlXsA8Q/ZV4+M+0X2l0X2Aqj80QksvC7mCs0p0CQI"
      - run:
          name: Promote Build to DEV
          command: |
            VERSION=$(grep -e "^appVersion:" charts/nuodbaas-webui/Chart.yaml | cut -d \" -f 2 | cut -d - -f 1)
            SHA=$(git rev-parse --short HEAD)
            VERSION_SHA=${VERSION}-${SHA}

            mkdir -p tmp/repos/$DBAAS_DEPLOY_REPO \
              && cd tmp/repos/$DBAAS_DEPLOY_REPO
            git clone "https://github.com/nuodb/${DBAAS_DEPLOY_REPO}.git" .
            git checkout $DBAAS_DEPLOY_BRANCH
            COMMIT="$(echo ${CIRCLE_SHA1:0:7})"
            if [ -n "$GIT_TAG" ]; then
              COMMIT="$GIT_TAG"
            fi
            head="$(git rev-parse --short HEAD)"
            # Update NuoDBaaS WebUI version
            scripts/promote-version.sh nuodbaas-webui \
              --set nuodbaas_webui_image_tag=$VERSION_SHA \
              --set nuodbaas_webui_chart_version=$VERSION_SHA
            # Check if the version has been promoted
            if [ "$head" != "$(git rev-parse --short HEAD)" ]; then
              git commit -a --amend --no-edit
              git push --set-upstream origin "$(git rev-parse --abbrev-ref HEAD)"
            fi
          environment:
            DBAAS_DEPLOY_REPO: nuodb-dbaas-deploy
            DBAAS_DEPLOY_BRANCH: main
            GIT_COMMITTER_NAME: promotebot[bot]
            GIT_COMMITTER_EMAIL: support@nuodb.com

  create_release:
    machine:
      image: ubuntu-2204:2023.10.1
    resource_class: medium
    environment:
      CREATE_RELEASE: << pipeline.parameters.create_release >>
    steps:
      - checkout
      - aws-cli/setup
      - helm/install-helm-client
      - run:
          name: Check that AWS environment variables were supplied
          command: |
            : ${AWS_REGION:?"Must specify AWS region"}
            AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account | sed 's/^"\(.*\)"$/\1/g')"
            ECR_ACCOUNT_URL="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
            echo "export ECR_ACCOUNT_URL=\"$ECR_ACCOUNT_URL\"" >> "$BASH_ENV"
      - run:
          name: Login to ECR for Docker and Helm
          command: |
            aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_ACCOUNT_URL"
            aws ecr get-login-password --region "$AWS_REGION" | helm registry login --username AWS --password-stdin "$ECR_ACCOUNT_URL"
      - run:
          name: Login to Github Container Registry
          command: |
            echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin
      - run:
          name: Optionally creating release
          command: |
            ./build_utils.sh createRelease "${CREATE_RELEASE}"

commands:
  check_skip_promotion:
    description: |
      Skip build promotion if it's not triggered by a release tag or build
      promotion is not explicitly enabled.
    steps:
      - when:
          condition:
            and:
              - not:
                  matches:
                    pattern: "^v.*"
                    value: << pipeline.git.tag >>
              - not: << pipeline.parameters.promote >>
          steps:
            - run:
                name: Skip publishing because the build should not be promoted
                command: circleci-agent step halt

parameters:
  # set to true to promote this build into internal DBaaS cluster
  promote:
    type: boolean
    default: false
    description: |
      Promotes NuoDBaaS WebUI build into internal DBaaS cluster
  create_release:
    type: string
    default: ""
    description: |
      Create a Release. Pass in the version number to create - it has to match up with the appVersion and version in charts/nuodbaas-webui/Chart.yaml

workflows:
  version: 2
  continuous:
    jobs:
      # run test jobs in parallel
      - build_image:
          name: "Build image"
      - build_and_deploy:
          requires:
            - "Build image"
          name: "Test and deploy"
      - promote_build:
          requires:
            - "Test and deploy"
          name: "Optionally Promote to DBaaS DEV"
      - create_release:
          requires:
            - "Test and deploy"
          name: "Optionally Create Release"
